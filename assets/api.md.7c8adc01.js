import{_ as a,c as e,o as t,d as n}from"./app.5ad6f82b.js";const b='{"title":"API reference","description":"","frontmatter":{"title":"API reference","editLink":true},"headers":[{"level":2,"title":"Cache","slug":"cache"},{"level":3,"title":"new Cache()","slug":"new-cache"},{"level":3,"title":"cache.set(key, value, options)","slug":"cache-set-key-value-options"},{"level":3,"title":"cache.get(key) \u21D2","slug":"cache-get-key-\u21D2-t-array-t"},{"level":3,"title":"cache.del(key) \u21D2","slug":"cache-del-key-\u21D2-boolean"},{"level":3,"title":"cache.stats() \u21D2","slug":"cache-stats-\u21D2-cachestats"},{"level":3,"title":"cache.flush()","slug":"cache-flush"},{"level":2,"title":"Validator","slug":"validator"},{"level":3,"title":"new Validator()","slug":"new-validator"},{"level":3,"title":"validator.validate(data)","slug":"validator-validate-data"},{"level":3,"title":"validator.validateList(data)","slug":"validator-validatelist-data"},{"level":3,"title":"validator.getSchema()","slug":"validator-getschema"}],"relativePath":"api.md"}',s={},r=n(`<p><a name="Cache"></a></p><h2 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-hidden="true">#</a></h2><p><strong>Kind</strong>: global class<br><strong>Properties</strong></p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>string</td><td><code>cacheKey</code></td><td>A unique identifier for the Cache instance.</td></tr><tr><td>string</td><td><code>entryKey</code></td><td>The property that defines the cache entry</td></tr><tr><td>number</td><td><code>lifetime</code></td><td>The entry&#39;s lifetime in milliseconds</td></tr><tr><td>any</td><td><code>original</code></td><td>An object based on which the cache&#39;s validation can be set</td></tr></tbody></table><ul><li><a href="#Cache">Cache</a><ul><li><a href="#new_Cache_new">new Cache()</a></li><li><a href="#Cache+set">.set(key, value, options)</a></li><li><a href="#Cache+get">.get(key)</a> \u21D2 <code>T</code> | <code>Array.&lt;T&gt;</code></li><li><a href="#Cache+del">.del(key)</a> \u21D2 <code>boolean</code></li><li><a href="#Cache+stats">.stats()</a> \u21D2 <code>CacheStats</code></li><li><a href="#Cache+flush">.flush()</a></li></ul></li></ul><p><a name="new_Cache_new"></a></p><h3 id="new-cache" tabindex="-1">new Cache() <a class="header-anchor" href="#new-cache" aria-hidden="true">#</a></h3><p>A simple key-value cache. Built to store typed and structured data. Qache combines simplicity and security - it clones all data and stores them instead of keeping their references in memory.</p><p><strong>Example</strong></p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">secondName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">cacheKey</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entryKey</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lifetime</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><a name="Cache+set"></a></p><h3 id="cache-set-key-value-options" tabindex="-1">cache.set(key, value, options) <a class="header-anchor" href="#cache-set-key-value-options" aria-hidden="true">#</a></h3><p>Adds an entry to the cache.</p><p><strong>Kind</strong>: instance method of <a href="#Cache"><code>Cache</code></a></p><table><thead><tr><th>Param</th><th>Description</th></tr></thead><tbody><tr><td>key</td><td>Identifier of the cache entry</td></tr><tr><td>value</td><td>Value of the cache entry</td></tr><tr><td>options</td><td>Custom options for this cache entry</td></tr></tbody></table><p><strong>Example</strong></p><div class="language-js line-numbers-mode"><pre><code>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;/users/1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">secondName</span><span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><a name="Cache+get"></a></p><h3 id="cache-get-key-\u21D2-t-array-t" tabindex="-1">cache.get(key) \u21D2 <code>T</code> | <code>Array.&lt;T&gt;</code> <a class="header-anchor" href="#cache-get-key-\u21D2-t-array-t" aria-hidden="true">#</a></h3><p>Get a value from the cache.</p><p><strong>Kind</strong>: instance method of <a href="#Cache"><code>Cache</code></a><br><strong>Returns</strong>: <code>T</code> | <code>Array.&lt;T&gt;</code> - The value of the cache entry</p><table><thead><tr><th>Param</th><th>Description</th></tr></thead><tbody><tr><td>key</td><td>Identifier of the cache entry</td></tr></tbody></table><p><strong>Example</strong></p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/users/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Prints</span>
<span class="token comment">// {</span>
<span class="token comment">//  id: &#39;1&#39;,</span>
<span class="token comment">//  firstName: &#39;John&#39;,</span>
<span class="token comment">//  secondName: &#39;Doe&#39;,</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a name="Cache+del"></a></p><h3 id="cache-del-key-\u21D2-boolean" tabindex="-1">cache.del(key) \u21D2 <code>boolean</code> <a class="header-anchor" href="#cache-del-key-\u21D2-boolean" aria-hidden="true">#</a></h3><p>Deletes a single entry from the cache</p><p><strong>Kind</strong>: instance method of <a href="#Cache"><code>Cache</code></a><br><strong>Returns</strong>: <code>boolean</code> - Whether the entry was deleted</p><table><thead><tr><th>Param</th><th>Description</th></tr></thead><tbody><tr><td>key</td><td>Identifier of the cache entry</td></tr></tbody></table><p><strong>Example</strong></p><div class="language-js line-numbers-mode"><pre><code>cache<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&#39;/users/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns true</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a name="Cache+stats"></a></p><h3 id="cache-stats-\u21D2-cachestats" tabindex="-1">cache.stats() \u21D2 <code>CacheStats</code> <a class="header-anchor" href="#cache-stats-\u21D2-cachestats" aria-hidden="true">#</a></h3><p>Get details about the cache instance</p><p><strong>Kind</strong>: instance method of <a href="#Cache"><code>Cache</code></a><br><strong>Returns</strong>: <code>CacheStats</code> - A list of details about the current cache instance<br><a name="Cache+flush"></a></p><h3 id="cache-flush" tabindex="-1">cache.flush() <a class="header-anchor" href="#cache-flush" aria-hidden="true">#</a></h3><p>Resets the cache instance. Does not reset schemata and datatype.</p><p><strong>Kind</strong>: instance method of <a href="#Cache"><code>Cache</code></a><br><a name="Validator"></a></p><h2 id="validator" tabindex="-1">Validator <a class="header-anchor" href="#validator" aria-hidden="true">#</a></h2><p><strong>Kind</strong>: global class<br><strong>Properties</strong></p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Schema</td><td><code>schema</code></td><td>A schema object</td></tr><tr><td>ValidationMethod</td><td><code>validate</code></td><td><code>quick</code> or <code>deep</code></td></tr></tbody></table><ul><li><a href="#Validator">Validator</a><ul><li><a href="#new_Validator_new">new Validator()</a></li><li><a href="#Validator+validate">.validate(data)</a></li><li><a href="#Validator+validateList">.validateList(data)</a></li><li><a href="#Validator+getSchema">.getSchema()</a></li></ul></li></ul><p><a name="new_Validator_new"></a></p><h3 id="new-validator" tabindex="-1">new Validator() <a class="header-anchor" href="#new-validator" aria-hidden="true">#</a></h3><p>Creates minimal object-validation schemata from primitive and complex types. There are two kinds of validation: <code>quick</code> and <code>deep</code>. - <code>quick</code> should be used when objects look exactly alike, including their property structure - <code>deep</code> should be used when objects are alike structurally, but their properties&#39;s indexes differ.</p><p><a name="Validator+validate"></a></p><h3 id="validator-validate-data" tabindex="-1">validator.validate(data) <a class="header-anchor" href="#validator-validate-data" aria-hidden="true">#</a></h3><p>Validates an item against the currently active schema</p><p><strong>Kind</strong>: instance method of <a href="#Validator"><code>Validator</code></a></p><table><thead><tr><th>Param</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>The item to validate</td></tr></tbody></table><p><a name="Validator+validateList"></a></p><h3 id="validator-validatelist-data" tabindex="-1">validator.validateList(data) <a class="header-anchor" href="#validator-validatelist-data" aria-hidden="true">#</a></h3><p>Validates an array of items against the currently active schema</p><p><strong>Kind</strong>: instance method of <a href="#Validator"><code>Validator</code></a></p><table><thead><tr><th>Param</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>An array of items to validate</td></tr></tbody></table><p><a name="Validator+getSchema"></a></p><h3 id="validator-getschema" tabindex="-1">validator.getSchema() <a class="header-anchor" href="#validator-getschema" aria-hidden="true">#</a></h3><p>Get the currently active schema of this validator instance</p><p><strong>Kind</strong>: instance method of <a href="#Validator"><code>Validator</code></a></p>`,59),o=[r];function c(l,p,d,i,h,u){return t(),e("div",null,o)}var k=a(s,[["render",c]]);export{b as __pageData,k as default};
