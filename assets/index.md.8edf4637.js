import{_ as a,c as n,o as s,d as e}from"./app.5ad6f82b.js";const b='{"title":"Home","description":"","frontmatter":{"title":"Home","editLink":true},"headers":[{"level":2,"title":"Table of contents","slug":"table-of-contents"},{"level":2,"title":"About The Project","slug":"about-the-project"},{"level":2,"title":"Getting Started","slug":"getting-started"},{"level":3,"title":"Installation","slug":"installation"},{"level":3,"title":"Development","slug":"development"},{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Default configuration example","slug":"default-configuration-example"},{"level":3,"title":"Create a new cache instance","slug":"create-a-new-cache-instance"},{"level":3,"title":"Add and modify cache entries","slug":"add-and-modify-cache-entries"},{"level":3,"title":"Automatic cache updates","slug":"automatic-cache-updates"},{"level":2,"title":"Roadmap","slug":"roadmap"},{"level":2,"title":"License","slug":"license"},{"level":2,"title":"Contact","slug":"contact"}],"relativePath":"index.md"}',t={},o=e(`<div id="top"></div><div align="center"><h1 align="center">Qache</h1><p align="center">Zero-dependency, lightweight caching module for Node.js and the browser - built with Typescript</p><div align="center"><img alt="License" src="https://img.shields.io/github/license/tq-bit/qache?style=plastic"><img alt="Size" src="https://img.shields.io/bundlephobia/min/@tq-bit/qache?style=plastic"><img alt="npm" src="https://img.shields.io/npm/dm/@tq-bit/qache?style=plastic&amp;logo=npm"><img alt="lgtm code quality" src="https://img.shields.io/lgtm/grade/javascript/g/tq-bit/qache.svg?logo=lgtm&amp;style=plastic"><img alt="GitHub last commit" src="https://img.shields.io/github/last-commit/tq-bit/qache?style=plastic&amp;logo=git"><img alt="nycrc config on GitHub" src="https://img.shields.io/nycrc/tq-bit/qache?config=.nycrc&amp;preferredThreshold=lines&amp;logo=mocha&amp;style=plastic"></div></div><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><ul><li><a href="#table-of-contents">Table of contents</a></li><li><a href="#about-the-project">About The Project</a></li><li><a href="#getting-started">Getting Started</a><ul><li><a href="#installation">Installation</a></li><li><a href="#development">Development</a><ul><li><a href="#build-the-project--docs-recommended">Build the project + docs (recommended)</a></li><li><a href="#run-the-automated-test-suite">Run the automated test suite</a></li><li><a href="#run-the-documentation-locally">Run the documentation locally</a></li><li><a href="#deploy-the-documentation-to-github-pages">Deploy the documentation to GitHub Pages</a></li><li><a href="#create-a-new-npm-release">Create a new NPM release</a></li></ul></li></ul></li><li><a href="#usage">Usage</a><ul><li><a href="#default-configuration-example">Default configuration example</a></li><li><a href="#create-a-new-cache-instance">Create a new cache instance</a></li><li><a href="#add-and-modify-cache-entries">Add and modify cache entries</a></li><li><a href="#automatic-cache-updates">Automatic cache updates</a></li></ul></li><li><a href="#roadmap">Roadmap</a></li><li><a href="#license">License</a></li><li><a href="#contact">Contact</a></li></ul><h2 id="about-the-project" tabindex="-1">About The Project <a class="header-anchor" href="#about-the-project" aria-hidden="true">#</a></h2><p>Qache at its core is a simple key-value store. Its USP lies in the ability to keep collections of items in sync with single entries. The feature was heavily inspired by <a href="https://www.apollographql.com/docs/react/data/caching/" target="_blank" rel="noopener noreferrer">Apollo&#39;s caching system</a>. I also added a validation system to prevent faulty values from sneaking in.</p><p>The module&#39;s structured like this:</p><p><img src="https://github.com/tq-bit/qache/blob/master/docs/assets/Qache-built.png" alt=""></p><p>I built Qache as a secure and lightweight HTTP cache for my Vue apps. It can also be used on the serverside using ES6 module imports.</p><p align="right">(<a href="#top">back to top</a>)</p><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p>Qache has a tiny footprint and no dependencies. It can be used in any Browser or Node (v14+) environment that supports <a href="https://www.geeksforgeeks.org/how-to-use-an-es6-import-in-node-js/" target="_blank" rel="noopener noreferrer">ES6 module imports</a>.</p><h3 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h3><p>Run the following command in a project of your choice:</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> <span class="token function">install</span> @tq-bit/qache
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>You can then import the module into your project:</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// Using ES6 modules:</span>
<span class="token keyword">import</span> Qache <span class="token keyword">from</span> <span class="token string">&#39;@tq-bit/qache&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Using CommonJS (untested, may not support intellisense properly):</span>
<span class="token keyword">const</span> Qache <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@tq-bit/qache&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// You can then start using it in your code:</span>
<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Qache</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cacheKey</span><span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-hidden="true">#</a></h3><p>Clone the repository to your local machine. You can find:</p><ul><li>The source code in the <code>src</code> folder</li><li>Automated <strong>Mocha</strong> tests in the <code>test</code> folder</li><li>Its documentation in the <code>docs</code> folder</li></ul><blockquote><p><strong>Note:</strong> Parts of the documentation are automatically created during build time.</p><ul><li><code>index</code> is equal to <code>readme.md</code></li><li><code>api</code> is extracted from JSDoc comments in the built files</li></ul></blockquote><h4 id="build-the-project-docs-recommended" tabindex="-1">Build the project + docs (recommended) <a class="header-anchor" href="#build-the-project-docs-recommended" aria-hidden="true">#</a></h4><p>The following command build the project and the documentation files. It applies configured linting rules and runs registered automated tests.</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> run pre-release
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="run-the-automated-test-suite" tabindex="-1">Run the automated test suite <a class="header-anchor" href="#run-the-automated-test-suite" aria-hidden="true">#</a></h4><p>Unit tests are written using Mocha + Chai. Run them using:</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> run <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="run-the-documentation-locally" tabindex="-1">Run the documentation locally <a class="header-anchor" href="#run-the-documentation-locally" aria-hidden="true">#</a></h4><p>Qache is documented using <a href="https://vitepress.vuejs.org/" target="_blank" rel="noopener noreferrer">Vitepress</a>. You can run the documentation locally:</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> run docs:dev
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="deploy-the-documentation-to-github-pages" tabindex="-1">Deploy the documentation to GitHub Pages <a class="header-anchor" href="#deploy-the-documentation-to-github-pages" aria-hidden="true">#</a></h4><p>You can find the release documentation under <a href="https://tq-bit.github.io/qache" target="_blank" rel="noopener noreferrer">https://tq-bit.github.io/qache</a>. To build it, use:</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> run docs:deploy

<span class="token comment"># Alternatively, you can just buidl the docs and serve them locally</span>
<span class="token function">npm</span> run docs:build <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run docs:serve
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="create-a-new-npm-release" tabindex="-1">Create a new NPM release <a class="header-anchor" href="#create-a-new-npm-release" aria-hidden="true">#</a></h4><p>This command runs the <code>pre-release</code> command and pushes a new, built version on NPM</p><blockquote><p><strong>Note:</strong> This command requires a 2fa confirmation</p></blockquote><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> run release
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p align="right">(<a href="#top">back to top</a>)</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>Besides caching, Qache keeps related entries in sync and ensures type safety. As a consequence, it comes with a few opinionated (but optional) features:</p><ul><li><strong>Schema validation</strong> -&gt; The first entry that is added into the cache defines the schema for other entries. You can optionally pass an <code>original</code> - property into the configuration to build up the schema.</li><li><ul><li><strong>One cache per API resource</strong> -&gt; Each cache can be equipped with a validation schema. To avoid conflicts, resources you work with should have their dedicated cache instance.</li></ul></li><li><strong>Type safety</strong> -&gt; You can use Typescript Generics to supercharge Qache&#39;s type safety.</li><li><strong>Automatic cache updates</strong> -&gt; When a single entry is created or updated by its key, Qache will try to update related entries. See <a href="#automatic-cache-updates">Automatic cache updates</a></li></ul><h3 id="default-configuration-example" tabindex="-1">Default configuration example <a class="header-anchor" href="#default-configuration-example" aria-hidden="true">#</a></h3><p>This is the default configuration used by the Qache constructor. I&#39;d recommend you give each cache at least a unique <code>cacheKey</code> property.</p><div class="language-ts line-numbers-mode"><pre><code><span class="token punctuation">{</span>
  cacheKey <span class="token operator">=</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
  entryKey <span class="token operator">=</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
  lifetime <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span>
  validate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  original <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="create-a-new-cache-instance" tabindex="-1">Create a new cache instance <a class="header-anchor" href="#create-a-new-cache-instance" aria-hidden="true">#</a></h3><p>Once you&#39;ve installed Qache, you can start creating cache instances in your project.</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> Cache <span class="token keyword">from</span> <span class="token string">&#39;@tq-bit/qache&#39;</span>

<span class="token comment">// Create a basic cache instance</span>
<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add a custom configuration</span>
<span class="token keyword">const</span> customCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  cacheKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>      <span class="token comment">// = the key of the cache instance</span>
  entryKey<span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>         <span class="token comment">// = the key-property of single cache entries to keep entries in sync</span>
  lifetime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment">// = assign an entry lifetime of 5 minutes,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// For TS users: Add a generic interface for improved type safety</span>
<span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  body<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> typedCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache<span class="token operator">&lt;</span>Post<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  cacheKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>
  entryKey<span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
  lifetime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// If a cache object is available during cache creation, it can be passed in as an &#39;original&#39;</span>
<span class="token keyword">const</span> typedCacheWithOriginal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache<span class="token operator">&lt;</span>Post<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  cacheKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>
  entryKey<span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
  lifetime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span>
  original<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="add-and-modify-cache-entries" tabindex="-1">Add and modify cache entries <a class="header-anchor" href="#add-and-modify-cache-entries" aria-hidden="true">#</a></h3><p>Each cache entry is saved a simple Javascript Object. It is identified by a <code>key</code> and has a dedicated <code>timeout</code> instance.</p><blockquote><p>Note: This approach might be replaced by a single check period to remove redundant entries.</p></blockquote><p>New entries can be created the same way updates are done.</p><div class="language-ts line-numbers-mode"><pre><code>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;api/posts/1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  title<span class="token operator">:</span> <span class="token string">&#39;Lorem Ipsum&#39;</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token string">&#39;Lorem ipsum dolor sit amet&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// You can also cache an array of entries</span>
cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;api/posts/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    title<span class="token operator">:</span> <span class="token string">&#39;Lorem Ipsum&#39;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token string">&#39;Lorem ipsum dolor sit amet&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    title<span class="token operator">:</span> <span class="token string">&#39;Lorem Ipsum&#39;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token string">&#39;Lorem ipsum dolor sit amet&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="automatic-cache-updates" tabindex="-1">Automatic cache updates <a class="header-anchor" href="#automatic-cache-updates" aria-hidden="true">#</a></h3><p>When a single entry is created or updated, all related cached entries are automatically updated as well. Qache will iterate through all array-like entries in the cache, try to find matches and update them accordingly. It works like this:</p><ol><li>A new entry is added to the cache</li><li>Qache will check if there are one or more collection items (= <code>Arrays</code>) in its cache-map</li><li>It will then either <code>add</code> or <code>update</code> entries into these collection types</li></ol><p>Deleting entries works analogous. If a single entry is removed from the cache, all collections will be updated accordingly.</p><p>Check out <a href="https://tq-bit.github.io/qache/examples.html" target="_blank" rel="noopener noreferrer">the docs</a> for examples</p><p align="right">(<a href="#top">back to top</a>)</p><h2 id="roadmap" tabindex="-1">Roadmap <a class="header-anchor" href="#roadmap" aria-hidden="true">#</a></h2><ul><li>[x] Release v0.1.0</li><li>[x] Add a &#39;strict&#39; mode in which types of entries are validated</li><li>[x] Make it possible to create a manual validation schema</li><li>[x] Add a more complex validation algorithm</li><li>[x] Add logic to prevent automatic cache updates, if not necessary</li><li>[ ] Remove the necessity to validate</li><li>[ ] Improve logging messages for when validation fails (requires complex validation logic)</li></ul><p align="right">(<a href="#top">back to top</a>)</p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-hidden="true">#</a></h2><p>Distributed under the MIT License. See <code>LICENSE</code> for more information.</p><p align="right">(<a href="#top">back to top</a>)</p><h2 id="contact" tabindex="-1">Contact <a class="header-anchor" href="#contact" aria-hidden="true">#</a></h2><p>Mail: <a href="mailto:tobi@q-bit.me">tobi@q-bit.me</a> - Twitter: <a href="https://twitter.com/qbitme" target="_blank" rel="noopener noreferrer">@qbitme</a></p><p>Project Link: <a href="https://github.com/tq-bit/qache" target="_blank" rel="noopener noreferrer">https://github.com/tq-bit/qache</a></p><p align="right">(<a href="#top">back to top</a>)</p>`,68),p=[o];function c(i,l,r,u,d,h){return s(),n("div",null,p)}var k=a(t,[["render",c]]);export{b as __pageData,k as default};
